#!/bin/bash

# Build and run container from source (Dockerfile) under
# /usr/local/share/container-sources/$NAME.
#
# Expected invocation is by symlinking build-run-container-sudo
# with the name of the command (== container) to run.

set -e
set -f
if [ -z "$SUDO_UID" ] ; then
	echo "$0: invoke via sudo." >&2
	exit 1
fi
NAME="$1"
shift
if ! [[ "$NAME" =~ ^[-a-zA-Z0-9]+$ ]] ; then			# sanity check
	echo "$0: pass correct container source directory name." >&2
	exit 2
fi
SOURCE_DIR="/usr/local/share/container-sources/$NAME"
if ! [ -f "$SOURCE_DIR/Dockerfile" ] ; then			# access check
	echo "$0: no $NAME container source." >&2
	exit 3
fi

DOCKER=/usr/bin/docker
IMAGE="$NAME-$SUDO_UID-$SUDO_GID"
$DOCKER images -q "$IMAGE" | grep . > /dev/null \
	|| $DOCKER build -t "$IMAGE" \
		--build-arg=UID="$SUDO_UID" --build-arg=GID="$SUDO_GID" \
		"$SOURCE_DIR" > /dev/null

# storing RUN_OPTS in a array for easy expansion of ~/'s to $HOME
RUN_OPTS=( $( $DOCKER inspect --format '{{ .Config.Labels.RUN_OPTS }}' "$IMAGE" ) )
if [ "${RUN_OPTS[*]}" == "<no value>" ] ; then
	RUN_OPTS=()
fi
$DOCKER run --rm --read-only \
	--user="$SUDO_UID":"$SUDO_GID" --security-opt=label=type:spc_t \
	-v "${PWD}:/data" ${RUN_OPTS[@]/#~\//"$HOME/"} "$IMAGE" "$@"
